-- This file handles fragile definitions.
-- They are to be defined this way due to internal reasons of the tool.
-- Do not touch these definitions.

module Foundation.Core.Primitives where

Fib (A B : U) (f : A -> B) (y : B) : U
  = (x : A) * Path B y (f x)

is-contr (A : U) : U
  = (x : A) * ((y : A) -> Path A x y)

is-equiv (A B : U) (f : A -> B) : U
  = (y : B) -> is-contr (Fib A B f y)

Equiv (A B : U) : U
  = (e : A -> B) * is-equiv A B e

refl (A : U) (x : A) : Path A x x
  = \i. x

id (A : U) (x : A) : A
  = x

Singl (A : U) (x : A) : U
  = Fib A A (id A) x

Singl/is-contr (A : U) (x : A) : is-contr (Singl A x)
  = ((x, refl A x), \v z. (v.2 z, \z'. v.2 (z /\ z')))

id/is-equiv (A : U) : is-equiv A A (id A)
  = Singl/is-contr A

IdEquiv (A : U) : Equiv A A
  = (id A, id/is-equiv A)

-- Dependent function type.

Pi (A : U) (B : A -> U) : U = (x : A) -> B x

-- Dependent pair type.

Sg (A : U) (B : A -> U) : U = (x : A) * B x
