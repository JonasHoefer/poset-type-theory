-- This file defines set quotients as an higher inductive type.

module Foundation.SetQuotients where

import Foundation.EquivalenceRelations
import Foundation.Images

precomp-Set-quotient (A : U) (R : Eq-Rel A) (B X : Set) (f : reflecting-map-Eq-Rel A R (Set/type B)) (g : Set/hom B X)
                        : reflecting-map-Eq-Rel A R (Set/type X) =
  ( \ x. g (reflecting-map-Eq-Rel/map A R (Set/type B) f x),
    \ x y r. ap ( Set/type B)
               ( Set/type X) g
               ( reflecting-map-Eq-Rel/map A R (Set/type B) f x)
               ( reflecting-map-Eq-Rel/map A R (Set/type B) f y)
               ( reflecting-map-Eq-Rel/reflects-Eq A R (Set/type B) f x y r))

is-set-quotient (A : U) (R : Eq-Rel A) (B : Set) (f : reflecting-map-Eq-Rel A R (Set/type B)) : U =
  (X : Set) -> is-equiv (Set/hom B X) (reflecting-map-Eq-Rel A R (Set/type X)) (precomp-Set-quotient A R B X f)

data Set-quotient (A : U) (R : Eq-Rel A) : U
  = Set-quotient/q (a : A)
  | Set-quotient/eq (a b : A) (r : Eq-Rel/type A R a b) <i> [(i=0) -> Set-quotient/q a, (i=1) -> Set-quotient/q b]
  | Set-quotient/squash (x y : Set-quotient A R) (p q : Path (Set-quotient A R) x y) <i j> [(i=0) -> p j, (i=1) -> q j, (j=0) -> x, (j=1) -> y]

Set-quotient/respects-relation (A : U) (R : Eq-Rel A) (x y : A) : Eq-Rel/type A R x y -> Path (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y) =
  \ r i. Set-quotient/eq x y r i

Set-quotient/is-set (A : U) (R : Eq-Rel A) : is-set (Set-quotient A R) =
  \ x y p q i j. Set-quotient/squash x y p q i j

Set-quotient/Set (A : U) (R : Eq-Rel A) : Set =
  ( Set-quotient A R,
    Set-quotient/is-set A R)

ind-Set-quotient (A : U) (R : Eq-Rel A) (P : Set-quotient A R -> Set) (f : (x : A) -> Set/type (P (Set-quotient/q x)))
                 (feq : (x y : A) -> (r : Eq-Rel/type A R x y) -> PathP (i. Set/type (P (Set-quotient/eq x y r i))) (f x) (f y)) : (x : Set-quotient A R) -> Set/type (P x) = split
  Set-quotient/q a -> f a
  Set-quotient/eq x y r i -> feq x y r i
  Set-quotient/squash x y p q i j ->
    square/dependent-fill
      ( Set-quotient A R) P x y p q
      ( \ i' j'. Set-quotient/squash x y p q i' j')
      ( ind-Set-quotient A R P f feq x)
      ( ind-Set-quotient A R P f feq y)
      ( \ k. ind-Set-quotient A R P f feq (p k))
      ( \ k. ind-Set-quotient A R P f feq (q k)) i j

rec-Set-quotient (A : U) (R : Eq-Rel A) (B : Set) (f : A -> Set/type B) (feq : (x y : A) -> Eq-Rel/type A R x y -> Path (Set/type B) (f x) (f y))
                    : (x : Set-quotient A R) -> Set/type B =
  ind-Set-quotient A R
    ( \ _. B) f feq

PathO-to-PathP (A : U) (x y : A) (p : Path A x y) (B : A -> U) (u : B x) (v : B y) : (PathO A x y p B u v) -> PathP (i. B (p i)) u v =
  Equiv/inv-map 
    ( PathP (i. B (p i)) u v)
    ( PathO A x y p B u v)
    ( path-to-equiv
      ( PathP (i. B (p i)) u v)
      ( PathO A x y p B u v)
      ( PathP-eq-PathO A x y p B u v))

ind-Set-quotient/Prop (A : U) (R : Eq-Rel A) (P : Set-quotient A R -> Prop) (f : (x : A) -> Prop/type (P (Set-quotient/q x)))
                         : (x : Set-quotient A R) -> Prop/type (P x) = split
  Set-quotient/q a -> f a
  Set-quotient/eq x y r i ->
    PathO-to-PathP
      ( Set-quotient A R)
      ( Set-quotient/q x)
      ( Set-quotient/q y)
      ( Set-quotient/respects-relation A R x y r)
      ( \ z. Prop/type (P z))
      ( f x)
      ( f y)
      ( Prop/is-prop
        ( P (Set-quotient/q y))
        ( tr (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y) (Set-quotient/respects-relation A R x y r) (\ z. Prop/type (P z)) (f x))
        ( f y)) i
  Set-quotient/squash x y p q i j ->
    square/dependent-fill
      ( Set-quotient A R)
      ( \ z. Prop/Set (P z)) x y p q
      ( \ i' j'. Set-quotient/squash x y p q i' j')
      ( ind-Set-quotient/Prop A R P f x)
      ( ind-Set-quotient/Prop A R P f y)
      ( \ k. ind-Set-quotient/Prop A R P f (p k))
      ( \ k. ind-Set-quotient/Prop A R P f (q k)) i j

rec-Set-quotient/Prop (A : U) (R : Eq-Rel A) (B : Prop) (f : A -> Prop/type B)
                         : (x : Set-quotient A R) -> Prop/type B =
  ind-Set-quotient/Prop A R (\ _. B) f

quotienting-is-surj (A : U) (R : Eq-Rel A) : is-surj A (Set-quotient A R) (\ a. Set-quotient/q a) =
  ind-Set-quotient/Prop A R
    ( \ x. Prop-trunc/Prop (Fib A (Set-quotient A R) (\ a. Set-quotient/q a) x))
    ( \ x. Prop-trunc/unit (x, refl (Set-quotient A R) (Set-quotient/q x)))

Set-quotient/relation (A : U) (R : Eq-Rel A) : reflecting-map-Eq-Rel A R (Set-quotient A R) =
  ( (\ x. Set-quotient/q x),
    Set-quotient/respects-relation A R)

Set-quotient/is-set-quotient/map (A : U) (R : Eq-Rel A) (B : Set)
                                    : (Set-quotient A R -> Set/type B) -> (reflecting-map-Eq-Rel A R (Set/type B)) =
  precomp-Set-quotient A R
    ( Set-quotient/Set A R) B
    ( Set-quotient/relation A R)

Set-quotient/is-set-quotient/inv-map (A : U) (R : Eq-Rel A) (B : Set)
                                        : (reflecting-map-Eq-Rel A R (Set/type B)) -> (Set-quotient A R -> Set/type B) =
  \ t. rec-Set-quotient A R B t.1 t.2

Set-quotient/is-set-quotient/right-htpy (A : U) (R : Eq-Rel A) (B : Set) (t : reflecting-map-Eq-Rel A R (Set/type B))
                                           : Path (reflecting-map-Eq-Rel A R (Set/type B)) (Set-quotient/is-set-quotient/map A R B (Set-quotient/is-set-quotient/inv-map A R B t)) t =
  refl (reflecting-map-Eq-Rel A R (Set/type B)) t

Set-quotient/is-set-quotient/left-htpy (A : U) (R : Eq-Rel A) (B : Set) (f : Set-quotient A R -> Set/type B)
                                          : Path (Set-quotient A R -> Set/type B) (Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f)) f =
  \ i x.
    rec-Prop-trunc
      ( Fib A (Set-quotient A R) (\ z. Set-quotient/q z) x)
      ( Set/eq/Prop B
        ( Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) x)
        ( f x))
      ( \ t. 
          comp
            ( Set/type B)
            ( Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) x)
            ( f (Set-quotient/q t.1))
            ( ap (Set-quotient A R) (Set/type B) (\ z. Set-quotient/is-set-quotient/inv-map A R B (Set-quotient/is-set-quotient/map A R B f) z) x (Set-quotient/q t.1) t.2)
            ( f x)
            ( ap (Set-quotient A R) (Set/type B) f (Set-quotient/q t.1) x (inv (Set-quotient A R) x (Set-quotient/q t.1) t.2)))
      ( quotienting-is-surj A R x) i

Set-quotient/is-set-quotient (A : U) (R : Eq-Rel A) : is-set-quotient A R (Set-quotient/Set A R) (Set-quotient/relation A R) =
  \ B.
  has-inverse/is-equiv
    ( Set-quotient A R -> Set/type B)
    ( reflecting-map-Eq-Rel A R (Set/type B))
    ( Set-quotient/is-set-quotient/map A R B)
    ( Set-quotient/is-set-quotient/inv-map A R B,
      ( Set-quotient/is-set-quotient/right-htpy A R B,
        Set-quotient/is-set-quotient/left-htpy A R B))

is-set-quotient/is-effective/rel-eq (A : U) (R : Eq-Rel A) (x y z : A) (r1 : Eq-Rel/type A R y z) : Path Prop (Eq-Rel/Relation A R x y) (Eq-Rel/Relation A R x z) =
  Prop/eq/map
    ( Eq-Rel/Relation A R x y)
    ( Eq-Rel/Relation A R x z)
    ( equiv-to-path
      ( Eq-Rel/type A R x y)
      ( Eq-Rel/type A R x z)
      ( Prop/Equiv
        ( Eq-Rel/Relation A R x y)
        ( Eq-Rel/Relation A R x z)
        ( \ rxy. Eq-Rel/is-transitive A R x y z rxy r1)
        ( \ rxz. Eq-Rel/is-transitive A R x z y rxz
                ( Eq-Rel/is-symmetric A R y z r1))))

is-set-quotient/is-effective/rel-eq'' (A : U) (R : Eq-Rel A) (x y : A) (r : Eq-Rel/type A R x y) (z : A)
                                         : Path Prop (Eq-Rel/Relation A R x z) (Eq-Rel/Relation A R y z) =
  Prop/eq/map
    ( Eq-Rel/Relation A R x z)
    ( Eq-Rel/Relation A R y z)
    ( equiv-to-path
      ( Eq-Rel/type A R x z)
      ( Eq-Rel/type A R y z)
      ( Prop/Equiv
        ( Eq-Rel/Relation A R x z)
        ( Eq-Rel/Relation A R y z)
        ( \ rxz. Eq-Rel/is-symmetric A R z y
                ( Eq-Rel/is-transitive A R z x y
                  ( Eq-Rel/is-symmetric A R x z rxz) r))
        ( \ ryz. Eq-Rel/is-symmetric A R z x
                ( Eq-Rel/is-transitive A R z y x
                  ( Eq-Rel/is-symmetric A R y z ryz)
                  ( Eq-Rel/is-symmetric A R x y r)))))

lock Prop/is-set has-inverse/is-equiv Prop/eq/map 
is-set-quotient/is-effective/rel-aux' (A : U) (R : Eq-Rel A) (y : Set-quotient A R) (x : A) : Prop =
  rec-Set-quotient A R
    UU-Prop/Set
    ( \ y'. Eq-Rel/Relation A R x y')
    ( is-set-quotient/is-effective/rel-eq A R x) y

is-set-quotient/is-effective/rel-eq' (A : U) (R : Eq-Rel A) (y : Set-quotient A R) (a b : A) (r : Eq-Rel/type A R a b)
                                        : Path Prop (is-set-quotient/is-effective/rel-aux' A R y a)
                                                       (is-set-quotient/is-effective/rel-aux' A R y b) =
  ind-Set-quotient/Prop A R
    ( \ z. Set/eq/Prop UU-Prop/Set
            ( is-set-quotient/is-effective/rel-aux' A R z a)
            ( is-set-quotient/is-effective/rel-aux' A R z b))
    ( is-set-quotient/is-effective/rel-eq'' A R a b r) y

is-set-quotient/is-effective/rel-aux (A : U) (R : Eq-Rel A) (x y : Set-quotient A R) : Prop =
  rec-Set-quotient A R
    UU-Prop/Set
    ( is-set-quotient/is-effective/rel-aux' A R y)
    ( is-set-quotient/is-effective/rel-eq' A R y) x

is-set-quotient/is-effective/refl (A : U) (R : Eq-Rel A) (x : Set-quotient A R) : (Prop/type (is-set-quotient/is-effective/rel-aux A R x x)) =
  ind-Set-quotient/Prop A R
    ( \ x'. is-set-quotient/is-effective/rel-aux A R x' x')
    ( Eq-Rel/is-reflexive A R) x

is-set-quotient/is-effective/map (A : U) (R : Eq-Rel A) (x y : Set-quotient A R) : Path (Set-quotient A R) x y -> (Prop/type (is-set-quotient/is-effective/rel-aux A R x y)) =
  J ( Set-quotient A R) x
    ( \ z _. Prop/type (is-set-quotient/is-effective/rel-aux A R x z))
    ( is-set-quotient/is-effective/refl A R x) y

is-set-quotient/is-effective/R (A : U) (R : Eq-Rel A) (a b : Set-quotient A R) (x y : A) (p : Path (Set-quotient A R) a (Set-quotient/q x)) (q : Path (Set-quotient A R) b (Set-quotient/q y))
                               (r : Prop/type (is-set-quotient/is-effective/rel-aux A R a b)) : Prop/type (is-set-quotient/is-effective/rel-aux A R (Set-quotient/q x) (Set-quotient/q y)) =
  tr ( Set-quotient A R) a
     ( Set-quotient/q x) p
     ( \ z. Prop/type (is-set-quotient/is-effective/rel-aux A R z (Set-quotient/q y)))
     ( tr ( Set-quotient A R) b
          ( Set-quotient/q y) q
          ( \ z. Prop/type (is-set-quotient/is-effective/rel-aux A R a z)) r)

is-set-quotient/is-effective/eq' (A : U) (R : Eq-Rel A) (a b : Set-quotient A R) (x y : A) (p : Path (Set-quotient A R) a (Set-quotient/q x)) (q : Path (Set-quotient A R) b (Set-quotient/q y))
                                 (r : Prop/type (is-set-quotient/is-effective/rel-aux A R a b)) : Path (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y) =
  \ i. Set-quotient/eq x y
        ( is-set-quotient/is-effective/R A R a b x y p q r) i

is-set-quotient/is-effective/eq (A : U) (R : Eq-Rel A) (a b : Set-quotient A R) (x y : A) (p : Path (Set-quotient A R) a (Set-quotient/q x)) (q : Path (Set-quotient A R) b (Set-quotient/q y))
                                (r : Prop/type (is-set-quotient/is-effective/rel-aux A R a b)) : Path (Set-quotient A R) a b =
  tr ( Set-quotient A R)
     ( Set-quotient/q x) a
     ( inv (Set-quotient A R) a (Set-quotient/q x) p)
     ( \ z. Path (Set-quotient A R) z b)
     ( tr ( Set-quotient A R)
          ( Set-quotient/q y) b
          ( inv (Set-quotient A R) b (Set-quotient/q y) q)
          ( \ z. Path (Set-quotient A R) (Set-quotient/q x) z)
          ( is-set-quotient/is-effective/eq' A R a b x y p q r))

is-set-quotient/is-effective/inv-map (A : U) (R : Eq-Rel A) (x y : Set-quotient A R) (r : Prop/type (is-set-quotient/is-effective/rel-aux A R x y)) : Path (Set-quotient A R) x y =
  rec-Prop-trunc
    ( Fib A (Set-quotient A R) (\ a. Set-quotient/q a) x)
    ( Set/eq/Prop (Set-quotient/Set A R) x y)
    ( \ t. rec-Prop-trunc
          ( Fib A (Set-quotient A R) (\ a. Set-quotient/q a) y)
          ( Set/eq/Prop (Set-quotient/Set A R) x y)
          ( \ u. is-set-quotient/is-effective/eq A R x y t.1 u.1 t.2 u.2 r)
          ( quotienting-is-surj A R y))
    ( quotienting-is-surj A R x)

is-set-quotient/is-effective (A : U) (R : Eq-Rel A) (x y : A) : Equiv (Path (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y)) (Eq-Rel/type A R x y) =
  Prop/Equiv
    ( Set/eq/Prop (Set-quotient/Set A R) (Set-quotient/q x) (Set-quotient/q y))
    ( Eq-Rel/Relation A R x y)
    ( is-set-quotient/is-effective/map A R (Set-quotient/q x) (Set-quotient/q y))
    ( is-set-quotient/is-effective/inv-map A R (Set-quotient/q x) (Set-quotient/q y))

is-set-quotient/is-effective' (A : U) (R : Eq-Rel A) (x y : A) : Equiv (Eq-Rel/type A R x y) (Path (Set-quotient A R) (Set-quotient/q x) (Set-quotient/q y)) =
  Prop/Equiv
    ( Eq-Rel/Relation A R x y)
    ( Set/eq/Prop (Set-quotient/Set A R) (Set-quotient/q x) (Set-quotient/q y))
    ( is-set-quotient/is-effective/inv-map A R (Set-quotient/q x) (Set-quotient/q y))
    ( is-set-quotient/is-effective/map A R (Set-quotient/q x) (Set-quotient/q y))

unlock Prop/is-set has-inverse/is-equiv Prop/eq/map

is-set-quotient/is-surj/identifying-q (A : U) (R : Eq-Rel A) (B : Set) (f : reflecting-map-Eq-Rel A R (Set/type B))
                                      (x y : A) (r : Eq-Rel/type A R x y)
                                         : Path (im A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f))
                                                (im/q A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f) x)
                                                (im/q A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f) y) =
  let g : A -> Set/type B = (reflecting-map-Eq-Rel/map A R (Set/type B) f) in
  im/is-injective A
    ( Set/type B) g
    ( im/q A (Set/type B) g x)
    ( im/q A (Set/type B) g y)
    ( comp-n
      ( Set/type B) three-Nat
      ( im/inclusion A (Set/type B) g (im/q A (Set/type B) g x))
      ( g x)
      ( im/htpy A (Set/type B) g x)
      ( g y)
      ( reflecting-map-Eq-Rel/reflects-Eq A R (Set/type B) f x y r)
      ( im/inclusion A (Set/type B) g (im/q A (Set/type B) g y))
      ( im/htpy' A (Set/type B) g y))

is-set-quotient/is-surj/map (A : U) (R : Eq-Rel A) (B : Set) (f : reflecting-map-Eq-Rel A R (Set/type B))
                            (is-set-quotient-f : is-set-quotient A R B f) : Set/type B -> im A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f) =
  let q : A -> Set/type B = reflecting-map-Eq-Rel/map A R (Set/type B) f in
  is-equiv/inv-map
    ( Set/type B -> im A (Set/type B) q)
    ( reflecting-map-Eq-Rel A R (Set/type (im/Set A B q)))
    ( precomp-Set-quotient A R B (im/Set A B q) f)
    ( is-set-quotient-f (im/Set A B q))
    ( im/q A (Set/type B) q,
      is-set-quotient/is-surj/identifying-q A R B f)

lock is-prop/is-set
is-set-quotient/is-surj/htpy (A : U) (R : Eq-Rel A) (B : Set) (f : reflecting-map-Eq-Rel A R (Set/type B))
                             (H : is-set-quotient A R B f) : Htpy' A (im A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f))
                                                                   (\ x. is-set-quotient/is-surj/map A R B f H (reflecting-map-Eq-Rel/map A R (Set/type B) f x))
                                                                   (im/q A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f)) =
  let q : A -> Set/type B = reflecting-map-Eq-Rel/map A R (Set/type B) f in
  htpy-eq' A
    ( im A (Set/type B) q)
    ( \ x. is-set-quotient/is-surj/map A R B f H (q x))
    ( im/q A (Set/type B) q)
    ( \ i. ( ( is-equiv/inv-right-htpy 
              ( Set/type B -> im A (Set/type B) q)
              ( reflecting-map-Eq-Rel A R (Set/type (im/Set A B q)))
              ( precomp-Set-quotient A R B (im/Set A B q) f)
              ( H (im/Set A B q))
              ( im/q A (Set/type B) q,
                is-set-quotient/is-surj/identifying-q A R B f)) i).1)

is-set-quotient/is-surj/htpy2 (A : U) (R : Eq-Rel A) (B : Set) (f : reflecting-map-Eq-Rel A R (Set/type B)) (H : is-set-quotient A R B f) (x : A)
                                 : Path (Set/type B)
                                        (im/inclusion A (Set/type B) (reflecting-map-Eq-Rel/map A R (Set/type B) f)
                                                        (is-set-quotient/is-surj/map A R B f H (reflecting-map-Eq-Rel/map A R (Set/type B) f x)))
                                        (reflecting-map-Eq-Rel/map A R (Set/type B) f x) =
  let q : A -> Set/type B = reflecting-map-Eq-Rel/map A R (Set/type B) f in
  comp
    ( Set/type B)
    ( im/inclusion A
      ( Set/type B) q
      ( is-set-quotient/is-surj/map A R B f H (q x)))
    ( im/inclusion A
      ( Set/type B) q
      ( im/q A (Set/type B) q x))
    ( ap (im A (Set/type B) q) (Set/type B) (im/inclusion A (Set/type B) q) (is-set-quotient/is-surj/map A R B f H (q x)) (im/q A (Set/type B) q x)
      ( is-set-quotient/is-surj/htpy A R B f H x))
    ( q x)
    ( im/htpy A (Set/type B) q x)
