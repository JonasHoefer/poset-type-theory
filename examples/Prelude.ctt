module Prelude where

funType (A B : U) : U = A -> B

fiber (A B : U) (f : A -> B) (y : B) : U =
  (x : A) * Path B y (f x)

isContr (A : U) : U =
  (x : A) * ((y : A) -> Path A x y)

isEquiv (A B : U) (f : A -> B) : U =
  (y : B) -> isContr (fiber A B f y)

id (A : U) (x : A) : A = x

refl (A : U) (x : A) : Path A x x = \i. x

-- exactly isContrSingl
isEquivId (A : U) : isEquiv A A (id A) =
  \a. ((a, refl A a), \v z. (v.2 z, \z'. v.2 (z /\ z')))
