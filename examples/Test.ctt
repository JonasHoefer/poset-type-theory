module Test where

import Prelude
import Foundations

import Bool
import Empty
import Nat
import Sum
import Unit


funComp (A B C : U) (f : B -> C) (g : A -> B) (x : A) : C = f (g x)

isHAE (A B : U) (f : A -> B) : U =
  (g : B -> A) (linv : Homotopy A A (funComp A B A g f) (id A)) (rinv : Homotopy B B (funComp B A B f g) (id B))
  * ((x : A) -> Path (Path B (f (g (f x))) (f x)) (ap A B f (g (f x)) x (linv x)) (rinv (f x)))

-- we can now use paths to check some definitional equalities

sigmaEta (A : U) (B : A -> U) (p : (x : A) * B x) : Path ((x : A) * B x) p (p.1, p.2)
  = refl ((x : A) * B x) p

piEta (A : U) (B : A -> U) (f : (x : A) -> B x) : Path ((x : A) -> B x) f (\x. f x)
  = refl ((x : A) -> B x) f

transport (A : U) (B : A -> U) (a0 a1 : A) (p : Path A a0 a1) (u : B a0) : B a1
  = coe 0 1 (i. B (p i)) u

transportRefl (A : U) (B : A -> U) (a : A) (u : B a) : Path (B a) (transport A B a a (refl A a) u) u
  = \i. coe i 1 (_. B a) u


-- | A simple test to see that coe computes correctly on \i.A i -> B i
coeFun (A0 A1 B0 B1 : U) (A : Path U A0 A1) (B : Path U B0 B1) (f : A0 -> B0) : A1 -> B1
  = \a1. coe 0 1 (i. B i) (f (coe 1 0 (i. A i) a1))

coeFunBeta (A0 A1 B0 B1 : U) (A : Path U A0 A1) (B : Path U B0 B1) (f : A0 -> B0)
  : Path (A1 -> B1) (coe 0 1 (i. A i -> B i) f) (coeFun A0 A1 B0 B1 A B f)
  = refl (A1 -> B1) (coe 0 1 (i. A i -> B i) f)

-- | A simple test to see that coe computes correctly on \i.(A i * B i)
coePair (A0 A1 B0 B1 : U) (A : Path U A0 A1) (B : Path U B0 B1) (u : A0 * B0) : A1 * B1
  = (coe 0 1 (i. A i) u.1 , coe 0 1 (i. B i) u.2)

coePairBeta (A0 A1 B0 B1 : U) (A : Path U A0 A1) (B : Path U B0 B1) (u : A0 * B0)
  : Path (A1 * B1) (coe 0 1 (i. A i * B i) u) (coePair A0 A1 B0 B1 A B u)
  = refl (A1 * B1) (coe 0 1 (i. A i * B i) u)

-- | A simple test to see that coe computes correctly on \i.(Path A (a i) (b i))  (incomplete)
coePath (A : U) (a00 a01 a10 a11 : A) (p : Path A a00 a01) (q : Path A a10 a11) (r : Path A a00 a10)
  : Path A a01 a11
  = \i. hComp 0 1 A (r i)
          [ (i=0) -> j. p j
          , (i=1) -> j. q j
          ]



isDec (A : U) : U = Sum A (not A)

isDiscrete (A : U) (x y : A) : U = isDec (Path A x y)

--------------------------------------------------------------------------------
---- Quasi Constant Maps

quasiConst (A B : U) (f : A -> B) : U = (x y : A) -> Path B (f x) (f y)

quasiConst-const (A B : U) (b : B) : quasiConst A B (const A B b) = \x y. refl B b

QuasiConst (A B : U) : U = (f : A -> B) * quasiConst A B f

DecToQuasiConstant (A : U) (dec : isDec A) : QuasiConst A A
  = elimSum A (not A) (\_. QuasiConst A A) (\a. (const A A a, quasiConst-const A A a)) (\na. (id A, \a b. absurd (Path A a b) (na a))) dec


--------------------------------------------------------------------------------
---- Test

testTwo : Bool = transport U (id U) Bool Bool (IterNeg (suc (suc zero))) true

coeNeg : Bool = transport U (id U) Bool Bool NegPath true

-- because systems restrictions are not delayed, this takes quadratic time in the number of negations
testN : Bool = transport U (id U) Bool Bool (IterNeg (suc (exp ten (suc (suc zero))))) true
