module Torus where

import Foundations
import S1
import Square

data Torus : U
  = base
  | loop1At <i>
      [ (i=0) -> base
      , (i=1) -> base
      ]
  | loop2At <j>
      [ (j=0) -> base
      , (j=1) -> base
      ]
  | surfAt <i j>
      [ (i=0) -> loop2At j
      , (i=1) -> loop2At j
      , (j=0) -> loop1At i
      , (j=1) -> loop1At i
      ]

loop1 : Path Torus base base = \i. loop1At i

loop2 : Path Torus base base = \i. loop2At i

surf : PathP (i. Path Torus (loop1 i) (loop1 i)) loop2 loop2 = \i j. surfAt i j


--------------------------------------------------------------------------------
---- Torus → S¹ × S¹

torusToS1TimesS1 : Torus -> S1 * S1 = split
  base       -> (base  , base  )
  loop1At i  -> (loop i, base  )
  loop2At j  -> (base  , loop j)
  surfAt i j -> (loop i, loop j)

--------------------------------------------------------------------------------
---- S¹ × S¹ → Torus

S1TimesS1toTorus (t : S1 * S1) : Torus = rec-S1-pair Torus base loop1 loop2 surf t.1 t.2


--------------------------------------------------------------------------------
---- Torus → S¹ × S¹ → Torus

TorusToS1TimesS1Section : Homotopy Torus Torus (\t. S1TimesS1toTorus (torusToS1TimesS1 t)) (id Torus) = split
  base       -> \i. base
  loop1At i  -> \_. loop1At i
  loop2At j  -> \_. loop2At j
  surfAt i j -> \_. surfAt i j


--------------------------------------------------------------------------------
---- S¹ × S¹ → Torus → S¹ × S¹

TorusToS1TimesS1Retraction : Homotopy (S1 * S1) (S1 * S1) (\p. torusToS1TimesS1 (S1TimesS1toTorus p)) (id (S1 * S1))
  = \p. ind-S1-pair (\r s. Path (S1 * S1) (torusToS1TimesS1 (S1TimesS1toTorus (r, s))) (r, s))
          (\_. (base, base)) (\i _. (loop i, base)) (\j _. (base, loop j)) (\i j _. (loop i, loop j)) p.1 p.2


--------------------------------------------------------------------------------
---- Torus → S¹

-- multiplication of S¹ as a map from S¹ × S¹ which is equivalent to the Torus
TorusToS1 : Torus -> S1 = split
  base       -> base
  loop1At i  -> loop i
  loop2At j  -> loop j
  surfAt i j -> constSquare S1 base loop i j

multHomotopicTorusToS1 : Homotopy (S1 * S1) S1 (\p. TorusToS1 (S1TimesS1toTorus p)) (\p. mult p.1 p.2)
  = \p. ind-S1-pair (\r s. Path S1 (TorusToS1 (S1TimesS1toTorus (r, s))) (mult r s))
      (\_. base) (\i _. loop i) (\j _. loop j) (\i j _. constSquare S1 base loop i j) p.1 p.2
