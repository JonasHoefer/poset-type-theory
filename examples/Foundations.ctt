module Foundations where

import Prelude


data Nat : U = zero | suc (n : Nat)

--------------------------------------------------------------------------------
---- paths

Homotopy (A B : U) (f g : A -> B) : U = (x : A) -> Path B (f x) (g x)

doubleComp (A : U) (x y z w : A) (p : Path A y x) (q : Path A y z) (r : Path A z w) : Path A x w
  = \i. hComp 0 1 A (q i) [ (i=0) -> j. p j , (i=1) -> j. r j]

comp (A : U) (x y z : A) : Path A x y -> Path A y z -> Path A x z
  = doubleComp A x x y z (refl A x)

invComp (A : U) (x y z : A) (p : Path A y x) (q : Path A y z) : Path A x z
  = doubleComp A x y z z p q (refl A z)

unit-l (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) (comp A x x y (refl A x) p) p
  = \i j. hComp 0 1 A x
            [ (j=0) -> _. x
            , (j=1) -> k. p k
            , (i=0) -> k. -- hfill
                hComp 0 k A x
                  [ (j=0) -> m. x
                  , (j=1) -> m. p m
                  ]
            , (i=1) -> k. p (j /\ k)
            ]

unit-r (A : U) (x y : A) (p : Path A x y) : Path (Path A x y) (comp A x y y p (refl A y)) p
  = \i j. hComp 0 1 A (p j)
            [ (i=0) -> k.
                hComp 0 k A (p j)
                  [ (j=0) -> _. x
                  , (j=1) -> _. y
                  ]
            , (i=1) -> _. p j
            , (j=0) -> _. x
            , (j=1) -> _. y
            ]

inv (A : U) (x y : A) (p : Path A y x) : Path A x y
  = doubleComp A x y y y p (refl A y) (refl A y)

inv-l (A : U) (x y : A) (p : Path A x y) : Path (Path A y y) (comp A y x y (inv A y x p) p) (refl A y)
  = \i j. hComp 0 1 A (hComp 0 i A x [(j=0) -> k. p k, (j=1) -> _. x])
            [ (j=0) -> k. p (i \/ k)
            , (j=1) -> k. p k
            , (i=0) -> k. p k
            , (i=1) -> k. hComp 0 k A (inv A y x p j)
              [ (j=0) -> _. y
              , (j=1) -> l. p l
              ]
            ]

tr (A : U) (P : A -> U) (x y : A) (p : Path A x y) (u : P x) : P y
  = coe 0 1 (i. P (p i)) u

tr-refl (A : U) (B : A -> U) (a : A) (u : B a) : Path (B a) (tr A B a a (refl A a) u) u
  = \i. coe i 1 (_. B a) u

ap (A B : U) (f : A -> B) (x y : A) (p : Path A x y) : Path B (f x) (f y)
  = \i. f (p i)

apd (A : U) (B : A -> U) (f : (x : A) -> B x) (x y : A) (p : Path A x y) : PathP (i. B (p i)) (f x) (f y)
  = \i. f (p i)

funExt (A B : U) (f g : A -> B) (h : (a : A) -> Path B (f a) (g a)) : Path (A -> B) f g
  = \i x. h x i

depFunExt (A : U) (B : A -> U) (f g : (x : A) -> B x) (h : (a : A) -> Path (B a) (f a) (g a)) : Path ((x : A) -> B x) f g
  = \i x. h x i

PathOver (A : U) (B : A -> U) (a0 a1 : A) (p : Path A a0 a1) (b0 : B a0) (b1 : B a1) : U
  = Path (B a1) (tr A B a0 a1 p b0) b1


--------------------------------------------------------------------------------
---- basics

Prod (A B : U) : U = (_ : A) * B

const (A B : U) (b : B) (_ : A) : B = b


--------------------------------------------------------------------------------
---- contractability of singletons

is-contr (A : U) : U = (x : A) * ((y : A) -> Path A x y)

Singl (A : U) (x : A) : U = (y : A) * Path A x y

is-contr-singl-center (A : U) (x : A) : Singl A x = (x , refl A x)

is-contr-singl-contr (A : U) (x : A) (s : Singl A x) : Path (Singl A x) (is-contr-singl-center A x) s
  = \i. (s.2 i , \j. s.2 (i /\ j))

is-contr-singl (A : U) (x : A) : is-contr (Singl A x) = (is-contr-singl-center A x , is-contr-singl-contr A x)


--------------------------------------------------------------------------------
---- J

J (A : U) (x : A) (M : (y : A) (p : Path A x y) -> U) (m : M x (refl A x)) (y : A) (p : Path A x y) : M y p
  = tr (Singl A x) (\s. M s.1 s.2) (x , refl A x) (y , p) ((is-contr-singl A x).2 (y , p)) m

JRefl (A : U) (x : A) (M : (y : A) (p : Path A x y) -> U) (m : M x (refl A x)) : Path (M x (refl A x)) (J A x M m x (refl A x)) m
  = tr-refl (Singl A x) (\s. M s.1 s.2) (x , refl A x) m

-- tr-comp (A : U) (x y : A) (p : Path A x y) (z : A) (q : Path A y z) (P : A -> U) (u : P x) :
--     Path (P z) (tr A P x z (comp A x y z p q) u) (tr A P y z q (tr A P x y p u))
--   = _

--------------------------------------------------------------------------------
---- H-Levels

is-of-hlevel : Nat -> U -> U = split
  zero  -> is-contr
  suc n -> \A. (x y : A) -> is-of-hlevel n (Path A x y)

-- is-of-hlevel-closed-upwards (A : U) : (n : Nat) -> (p : is-of-hlevel n A) -> is-of-hlevel (suc n) A = split
--   zero  -> _
--   suc n -> _



--------------------------------------------------------------------------------
---- Propositions and Sets in terms of elements

is-prop (A : U) : U = (x y : A) -> (Path A x y)

is-prop-fam (A : U) (B : A -> U) : U = (x : A) -> is-prop (B x)

Prop : U = (A : U) * is-prop A

PropFam (A : U) : U = (P : A -> U) * is-prop-fam A P

PathP-PropFam (A : U) (P : PropFam A) (x : A) : (y : A) (p : Path A x y) (u : P.1 x) (v : P.1 y) -> PathP (i. P.1 (p i)) u v
  = J A x (\y p. (u : P.1 x) (v : P.1 y) -> PathP (i. P.1 (p i)) u v) (\u v. P.2 x u v)

is-prop-pi (A : U) (B : PropFam A) : is-prop ((x : A) -> B.1 x)
  = \f g i x. B.2 x (f x) (g x) i

is-prop-assumption (A : U) (p : A -> is-prop A) : is-prop A
  = \x y. p x x y

is-contr-impl-is-prop (A : U) (p : is-contr A) : is-prop A
  = \x y. comp A x p.1 y (inv A x p.1 (p.2 x)) (p.2 y)

is-set (A : U) : U = (x y : A) -> is-prop (Path A x y)

-- is-prop-impl-is-set (A : U) (p : is-prop A) : is-set A
--   = _
--
-- is-prop-is-contr (A : U) : is-prop (is-contr A)
--   = \ctr1 ctr2 i. (is-contr-impl-is-prop A ctr1 ctr1.1 ctr2.1 i, \x. U)

PointedPropIsContr (A : U) (a : A) (p : is-prop A) : is-contr A
  = (a, \b. p a b)


--------------------------------------------------------------------------------
---- Sections and Retractions

Retracts (A B : U) (s : A -> B) : U = (r : B -> A) * Homotopy A A (\x. r (s x)) (id A)

compRetracts (A B C : U) (s2 : B -> C) (s1 : A -> B) (r2 : Retracts B C s2) (r1 : Retracts A B s1) : Retracts A C (\x. s2 (s1 x))
  = (\y. r1.1 (r2.1 y), \x. comp A (r1.1 (r2.1 (s2 (s1 x)))) (r1.1 (s1 x)) x (\i. r1.1 (r2.2 (s1 x) i)) (r1.2 x))

Retraction (A B : U) : U = (s : A -> B) * Retracts A B s

RetractionInd (A B : U) (P : A -> U) (ret : Retraction A B) (p : (y : B) -> P (ret.2.1 y)) (x : A) : P x
  = tr A P (ret.2.1 (ret.1 x)) x (ret.2.2 x) (p (ret.1 x))

Sections (A B : U) (r : A -> B) : U = (s : B -> A) * Homotopy B B (\x. r (s x)) (id B)

compSections (A B C : U) (r2 : B -> C) (r1 : A -> B) (s2 : Sections B C r2) (s1 : Sections A B r1) : Sections A C (\x. r2 (r1 x))
  = (\x. s1.1 (s2.1 x), \x. comp C (r2 (r1 (s1.1 (s2.1 x)))) (r2 (s2.1 x)) x (\i. r2 (s1.2 (s2.1 x) i)) (s2.2 x))


--------------------------------------------------------------------------------
---- Isomorphisms

Iso (A B : U) : U =
  (f : A -> B) (g : B -> A)
  * Homotopy A A (\x. g (f x)) (id A)
  * Homotopy B B (\x. f (g x)) (id B)

isoFun (A B : U) (iso : Iso A B) : A -> B = iso.1

isoInv (A B : U) (iso : Iso A B) : B -> A = iso.2.1


--------------------------------------------------------------------------------
---- Bi-Invertible Maps

is-bi-inv (A B : U) (f : A -> B) : U = (_ : Retracts A B f) * Sections A B f

BiInv (A B : U) : U = (f : A -> B) * is-bi-inv A B f

is-bi-inv-comp (A B C : U) (f : B -> C) (g : A -> B) (p : is-bi-inv B C f) (q : is-bi-inv A B g) : is-bi-inv A C (\x. f (g x))
  = (compRetracts A B C f g p.1 q.1, compSections A B C f g  p.2 q.2)

is-emb (A B : U) (f : A -> B) : U
  = (x y : A) -> is-bi-inv (Path A x y) (Path B (f x) (f y)) (ap A B f x y)

-- is-bi-inv-cancel-l (A B C : U) (f : B -> C) (g : A -> B) (p : is-bi-inv B C f) (q : is-bi-inv A C (\x. f (g x))) : is-bi-inv A B g
--   = U


--------------------------------------------------------------------------------
---- Contractible Maps

-- is-prop-is-equiv (A B : U) (f : A -> B) : is-prop (is-equiv A B f)
--   = _

Equiv (A B : U) : U = (f : A -> B) * isEquiv A B f

IdEquiv (A : U) : Equiv A A = (id A , isEquivId A)


--------------------------------------------------------------------------------
---- Sigma Basics

SigmaPath (A : U) (B : A -> U) (u v : (a : A) * B a) : U =
  (p : Path A u.1 v.1) * PathOver A B u.1 v.1 p u.2 v.2

pairPathCurried (A : U) (B : A -> U) (a0 : A) : (a1 : A) (p : Path A a0 a1) (b0 : B a0) (b1 : B a1) (q : PathOver A B a0 a1 p b0 b1)
  -> Path ((a : A) * B a) (a0, b0) (a1, b1)
  = J A a0 (\a1 p. (b0 : B a0) (b1 : B a1) (q : PathOver A B a0 a1 p b0 b1) -> Path ((a : A) * B a) (a0, b0) (a1, b1))
      (\b0 b1 q. J (B a0) b0 (\b1' _. Path ((a : A) * B a) (a0, b0) (a0, b1')) (refl ((a : A) * B a) (a0, b0)) b1
        (invComp (B a0) b0 (coe 0 1 (i. B a0) b0) b1 (tr-refl A B a0 b0) q))

pairPath (A : U) (B : A -> U) (u v : (a : A) * B a) (p : SigmaPath A B u v) : Path ((a : A) * B a) u v
  = pairPathCurried A B u.1 v.1 p.1 u.2 v.2 p.2

pairPathProp (A : U) (B : A -> U) (u v : (a : A) * B a) (p : Path A u.1 v.1) (q : is-prop-fam A B) : Path ((a : A) * B a) u v
  = pairPath A B u v (p, q v.1 (coe 0 1 (i. B (p i)) u.2) v.2)


--------------------------------------------------------------------------------
---- Univalence

ua (A B : U) (e : Equiv A B) : Path U A B
  = \i. Ext B [ (i=0) -> (A, e.1, e.2) , (i=1) -> (B, id B, isEquivId B) ]

uaInv (A B : U) (e : Equiv B A) : Path U A B
  = \i. Ext A [ (i=0) -> (A, id A, isEquivId A) , (i=1) -> (B, e.1, e.2) ]
