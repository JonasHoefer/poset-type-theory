module Square where

Square (A : U) (a0 a1 b0 b1 : A)
               (u : Path A a0 a1) (v : Path A b0 b1)
               (r0 : Path A a0 b0) (r1 : Path A a1 b1) : U
  = PathP (i. (PathP (j.A) (u i) (v i))) r0 r1

flipSquare (A : U) (a0 a1 b0 b1 : A) (u : Path A a0 a1) (v : Path A b0 b1) (r0 : Path A a0 b0) (r1 : Path A a1 b1)
  (sq : Square A a0 a1 b0 b1 u v r0 r1) : Square A a0 b0 a1 b1 r0 r1 u v
  = \i j. sq j i

ConstSquare (A : U) (a : A) (p : Path A a a) : U = Square A a a a a p p p p

constSquare (A : U) (a : A) (p : Path A a a) : ConstSquare A a p
  = \i j. hComp 0 1 A (p (i \/ j))
            [ (i = 0) -> k. p j
            , (i = 1) -> k. p (j /\ k)
            , (j = 0) -> k. p i
            , (j = 1) -> k. p (i /\ k)
            ]

flip-constSquare (A : U) (a : A) (p : Path A a a) : Path (ConstSquare A a p) (flipSquare A a a a a p p p p (constSquare A a p)) (constSquare A a p)
  = \i. constSquare A a p
