module S1 where

import Foundations

import Bool
import PropTrunc
import Square

data S1 : U
  = base
  | loopAt <i> [ (i=0) -> base, (i=1) -> base ]

loop : Path S1 base base = \i. loopAt i

ind-S1 (M : S1 -> U) (b : M base) (l : PathP (i. M (loop i)) b b) : (z : S1) -> M z = split
  base     -> b
  loopAt i -> l i

ind-S1-pair (M : S1 -> S1 -> U) (b : M base base) (l1 : PathP (i. M (loop i) base) b b) (l2 : PathP (i. M base (loop i)) b b)
  (sq : PathP (i. PathP (j. M (loop i) (loop j)) (l1 i) (l1 i)) l2 l2) : (z z' : S1) -> M z z'
  = ind-S1 (\z. (z' : S1) -> M z z') (ind-S1 (\z'. M base z') b l2) (\i. ind-S1 (\z'. M (loop i) z') (l1 i) (\j. sq i j))

rec-S1-pair (M : U) (b : M) (l1 l2 : Path M b b) (sq : Square M b b b b l1 l1 l2 l2) : S1 -> S1 -> M
  = ind-S1-pair (\_ _. M) b l1 l2 sq


----------------------------------------------------------------------------------------
---- Loops

Loop (A : U) : U = (x : A) * Path A x x

S1-loop : Loop S1 = (base , loop)

DepLoop (A : U) (l : Loop A) (M : A -> U) : U
  = (x : M l.1) * PathP (i. M (l.2 i)) x x


----------------------------------------------------------------------------------------
---- Universal Property

gen-S1 (A : U) (f : S1 -> A) : Loop A
  = (f base , ap S1 A f base base loop)

rec-S1 (A : U) (l : Loop A) : S1 -> A = split
  base     -> l.1
  loopAt i -> l.2 i

S1-univ-prop-Iso (A : U) : Iso (S1 -> A) (Loop A)
  = let sec (f : S1 -> A) : Path (S1 -> A) (rec-S1 A (gen-S1 A f)) f
          = funExt S1 A (rec-S1 A (gen-S1 A f)) f
              (ind-S1 (\z. Path A (rec-S1 A (gen-S1 A f) z) (f z)) (\_. f base) (\k _. f (loop k)))

    in  (gen-S1 A, rec-S1 A, sec, refl (Loop A))


----------------------------------------------------------------------------------------
---- Dependent Universal Property

ind-S1' (M : S1 -> U) (l : DepLoop S1 S1-loop M) : (z : S1) -> M z = ind-S1 M l.1 l.2

dgen-S1 (P : S1 -> U) (f : (z : S1) -> P z) : DepLoop S1 S1-loop P
  = (f base, apd S1 P f base base loop)

S1-dep-univ-prop-Iso (P : S1 -> U) : Iso ((z : S1) -> P z) (DepLoop S1 S1-loop P)
  = let sec (f : (z : S1) -> P z) : Path ((z : S1) -> P z) (ind-S1' P (dgen-S1 P f)) f
          = depFunExt S1 P (ind-S1' P (dgen-S1 P f)) f
              (ind-S1 (\z. Path (P z) (ind-S1' P (dgen-S1 P f) z) (f z)) (\_. f base) (\k _. f (loop k)))

    in  (dgen-S1 P, \l. ind-S1 P l.1 l.2, sec, refl (DepLoop S1 S1-loop P))


----------------------------------------------------------------------------------------
---- Descent

-- DescData : U = (X : U) * Equiv X X

-- desc-S1 (P : S1 -> U) : DescData = (P base , _)

----------------------------------------------------------------------------------------
---- Connectedness of the circle

ind-S1-prop (P : PropFam S1) (b : P.1 base) : (z : S1) -> P.1 z
  = ind-S1 (\z. P.1 z) b (PathP-PropFam S1 P base base loop b b)

is-connected-S1 : is-connected S1
  = ind-S1-prop (\z. (z' : S1) -> PropTrunc (Path S1 z z'), \z. is-prop-pi S1 (\z'. PropTrunc (Path S1 z z'), \z'. is-prop-PropTrunc (Path S1 z z')))
      (ind-S1-prop (\z'. PropTrunc (Path S1 base z'), \z'. is-prop-PropTrunc (Path S1 base z')) (eta (refl S1 base)))
 

----------------------------------------------------------------------------------------
---- H-Space Structure

multLoop : (z : S1) -> Path S1 z z = split
  base     -> loop
  loopAt i -> constSquare S1 base loop i

mult (z : S1) : S1 -> S1 = split
  base     -> z
  loopAt j -> multLoop z j

mult-unit-right (z : S1) : Path S1 (mult z base) z = refl S1 z

mult-unit-left : (z : S1) -> Path S1 (mult base z) z = split
  base     -> refl S1 base
  loopAt j -> refl S1 (loopAt j)

mult-unit-coh : Path (Path S1 (mult base base) base) (mult-unit-left base) (mult-unit-right base)
  = refl (Path S1 (mult base base) base) (refl S1 base)

mult-comm : (z1 z2 : S1) -> Path S1 (mult z1 z2) (mult z2 z1) =
  ind-S1-pair (\z1 z2. Path S1 (mult z1 z2) (mult z2 z1))
    (\_. base) (\i _. loop i) (\j _. loop j) (\i j _. constSquare S1 base loop i j)

-- mult-assoc (z1 z2 : S1) : (z3 : S1) -> Path S1 (mult (mult z1 z2) z3) (mult z1 (mult z2 z3)) = split
--   base     -> refl S1 (mult z1 z2)
--   loopAt i -> U
-- it should be possible to define mult3 : S1 -> S1 -> S1 -> S1 using constCube; this map should be homotopic to both sides

-- mult-left-equiv : (z : S1) -> is-equiv (mult z)
--   = ind-S1-prop (\z. is-equiv (mult z), \z. _) _


----------------------------------------------------------------------------------------
---- Tests

doubleLoop : Path S1 base base = comp S1 base base base loop loop

tripleLoop : Path S1 base base = comp S1 base base base loop doubleLoop

TwistedDoubleCover : S1 -> U = rec-S1 U (Bool, NegPath)

testTrTDC1 : Bool = tr S1 TwistedDoubleCover base base loop true

testTrTDC2 : Bool = tr S1 TwistedDoubleCover base base doubleLoop true

testTrTDC3 : Bool = tr S1 TwistedDoubleCover base base tripleLoop true
